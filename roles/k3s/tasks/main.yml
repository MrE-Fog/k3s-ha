---
- name: download k3s setup script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s.sh
    mode: 0755

- name: check if k3s directory already exists
  stat:
    path: /var/lib/rancher/k3s/agent
  register: k3sAgentDir

- name: create /etc/rancher/k3s
  file:
    path: /etc/rancher/k3s
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: 0755
  become: yes

- name: generate config file
  template:
    src: config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: 0644
  become: yes

- name: setup k3s
  command: /tmp/k3s.sh
  become: yes
  environment:
    - INSTALL_K3S_VERSION: "{{ k3s_install_k3s_version }}"
  run_once: yes
  when: >
    inventory_hostname == first_node
    and not k3sAgentDir.stat.exists

- name: wait for token file to populate
  wait_for:
    path: /var/lib/rancher/k3s/server/token
  become: yes
  run_once: yes
  when: inventory_hostname == first_node

- name: get join token
  slurp:
    src: /var/lib/rancher/k3s/server/token
  become: yes
  register: k3s_cluster_token
  run_once: yes
  when: inventory_hostname == first_node

- name: generate config file
  template:
    src: config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: root
    mode: 0644
  become: yes

- name: get nodes
  command: kubectl get nodes
  register: nodes
  run_once: yes
  retries: 20
  delay: 3
  until: nodes.stdout | regex_findall('Ready') | length | int > 0 | int

- name: check for cacerts to be available
  uri:
    url: "https://{{ first_node }}:6443/cacerts"
    validate_certs: no
  register: cacerts
  run_once: yes
  when: inventory_hostname == first_node
  delay: 3
  retries: 20
  until: cacerts.content_length | int > 0 | int

- name: setup k3s (managers)
  command: /tmp/k3s.sh
  become: yes
  environment:
    - INSTALL_K3S_VERSION: "{{ k3s_install_k3s_version }}"
  throttle: 1
  when: >
    inventory_hostname != first_node
    and not k3sAgentDir.stat.exists

- name: get nodes
  command: kubectl get nodes
  register: nodes
  run_once: yes
  retries: 20
  delay: 3
  until: nodes.stdout | regex_findall('Ready') | length | int == ansible_play_hosts | length | int

- package_facts:

- name: enable kubectl bash completion at login
  lineinfile:
    line: . <(kubectl completion bash)
    path: ~root/.bash_aliases
    create: yes
    state: present
    owner: root
    group: root
    mode: 0700
  when: "'bash-completion' in packages"
